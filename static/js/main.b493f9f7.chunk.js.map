{"version":3,"sources":["data.ts","stores/FlipBook.ts","components/WordCard.tsx","components/SettingsForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["sampleText","FlipBook","_class","_this","this","Object","classCallCheck","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_intervalHandle","autorun","window","clearInterval","undefined","corpus","length","wordsPerMinute","_shouldFlip","setInterval","flip","_delay","createClass","key","value","_cursor","source","get","result","split","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","computed","getOwnPropertyDescriptor","action","WordCard","observer","_ref","flipbook","react_default","a","createElement","card","style","textAlign","word","Fragment","SettingsForm","props","es_form","layout","Item","label","input","TextArea","rows","placeholder","onChange","onChangeSource","onClick","onClear","divider","type","onUseSampleText","slider","disabled","min","max","step","onChangeSpeed","React","Component","event","_this2","target","_this3","_this4","_this5","useSampleText","App","className","width","components_WordCard","SettingsForm_SettingsForm","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b493f9f7.chunk.js","sourcesContent":["export const sampleText = 'Did you know that most people read books at 200'\n + ' words per minute? \\nHowever if the words are made to appear one after the'\n + ' other people can read even faster. \\nUse the slider below to adjust the'\n + ' speed of text appearing here'","import { observable, computed, action, autorun } from \"mobx\";\nimport { sampleText } from '../data'\n\nexport class FlipBook {\n  @observable\n  wordsPerMinute: number = 200\n\n  @observable\n  source: string = sampleText\n\n  @observable\n  _cursor: number = 0\n\n  _intervalHandle?: number\n\n  constructor() {\n    autorun(() => {\n      if (this._intervalHandle) {\n        window.clearInterval(this._intervalHandle)\n        this._intervalHandle = undefined\n      }\n\n      if (this.corpus.length === 0) {\n        this.wordsPerMinute = 0\n      }\n\n      if (this._shouldFlip) {\n        this._intervalHandle = window.setInterval(() => this.flip(), this._delay)\n      }\n    })\n  }\n\n  get _delay(): number {\n    return  60000/this.wordsPerMinute\n  }\n\n  @computed\n  get word() {\n    return this.corpus[this._cursor]\n  }\n\n  @computed\n  get corpus() {\n    const result = this.source.split(' ')\n    if (result.length === 1 && result[0] === '') {\n      return []\n    }\n\n    return result\n  }\n\n  @computed\n  get _shouldFlip(): boolean {\n    return this.wordsPerMinute !== 0\n  }\n\n  @action\n  flip() {\n    const { corpus } = this;\n\n    if (corpus.length === 0) {\n      return\n    } else if (this._cursor < corpus.length - 1) {\n      this._cursor += 1\n    } else {\n      this._cursor = 0\n    }\n  }\n\n  @action\n  useSampleText() {\n    this.source = sampleText\n  }\n}","import React from 'react'\nimport { observer } from 'mobx-react';\nimport { Card } from 'antd';\nimport { FlipBook } from '../stores/FlipBook';\n\ninterface Props {\n  flipbook: FlipBook\n}\n\n// stub that can be used to keep node in DOM\nconst nbsp = () => <>&nbsp;</>\n\nconst WordCard = observer(({ flipbook }: Props) => (\n  <Card style={{ textAlign: 'center' }}>\n    <h1>{ flipbook.word || nbsp() }</h1>\n  </Card>\n))\n\nexport default WordCard","import React from 'react'\nimport { observer } from 'mobx-react';\nimport { FlipBook } from '../stores/FlipBook';\nimport { Form, Input, Slider, Divider } from 'antd';\nimport { action } from 'mobx';\nimport { SliderValue } from 'antd/lib/slider';\n\nexport interface Props {\n  flipbook: FlipBook\n}\n\n@observer\nexport default class SettingsForm extends React.Component<Props> {\n  @action\n  onChangeSource = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { flipbook } = this.props\n    flipbook.source = event.target.value\n  }\n\n  @action\n  onChangeSpeed = (value: SliderValue) => {\n    const { flipbook } = this.props\n    if (typeof value === 'number') {\n      flipbook.wordsPerMinute = value\n    }\n  }\n\n  @action\n  onClear = () => {\n    const { flipbook } = this.props\n    flipbook.source = ''\n  }\n\n  @action\n  onUseSampleText = () => {\n    const { flipbook } = this.props\n    flipbook.useSampleText()\n  }\n\n  render() {\n    const { flipbook } = this.props\n    return (\n      <Form layout='vertical'>\n        <Form.Item label='source'>\n          <Input.TextArea value={flipbook.source} rows={10} placeholder='paste source material here' onChange={this.onChangeSource} />\n          <div style={{ textAlign: 'right' }}>\n            <a onClick={this.onClear}>clear all</a>\n            <Divider type='vertical' />\n            <a onClick={this.onUseSampleText}>use sample</a>\n          </div>\n          \n        </Form.Item>\n        <Form.Item label='speed'>\n          <h4>({flipbook.wordsPerMinute}<small>wpm</small>)</h4>\n          <Slider disabled={flipbook.corpus.length === 0} value={flipbook.wordsPerMinute} min={0} max={400} step={100} onChange={this.onChangeSpeed}></Slider>\n        </Form.Item>\n      </Form>\n    )\n  }\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Button from './components/Button';\nimport { FlipBook } from './stores/FlipBook';\nimport WordCard from './components/WordCard';\nimport SettingsForm from './components/SettingsForm';\nimport { Card, Divider } from 'antd';\n\nconst flipbook = new FlipBook\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Card style={{ width: 500 }}>\n          <WordCard flipbook={flipbook} />\n          <Divider>settings</Divider>\n          <SettingsForm flipbook={flipbook} />\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}